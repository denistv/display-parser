// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// SQLDatabase is an autogenerated mock type for the SQLDatabase type
type SQLDatabase struct {
	mock.Mock
}

type SQLDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *SQLDatabase) EXPECT() *SQLDatabase_Expecter {
	return &SQLDatabase_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function with given fields:
func (_m *SQLDatabase) Begin() (*sql.Tx, error) {
	ret := _m.Called()

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func() (*sql.Tx, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *sql.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SQLDatabase_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type SQLDatabase_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *SQLDatabase_Expecter) Begin() *SQLDatabase_Begin_Call {
	return &SQLDatabase_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *SQLDatabase_Begin_Call) Run(run func()) *SQLDatabase_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SQLDatabase_Begin_Call) Return(_a0 *sql.Tx, _a1 error) *SQLDatabase_Begin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SQLDatabase_Begin_Call) RunAndReturn(run func() (*sql.Tx, error)) *SQLDatabase_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// BeginTx provides a mock function with given fields: ctx, opts
func (_m *SQLDatabase) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error) {
	ret := _m.Called(ctx, opts)

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) (*sql.Tx, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) *sql.Tx); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.TxOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SQLDatabase_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type SQLDatabase_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *sql.TxOptions
func (_e *SQLDatabase_Expecter) BeginTx(ctx interface{}, opts interface{}) *SQLDatabase_BeginTx_Call {
	return &SQLDatabase_BeginTx_Call{Call: _e.mock.On("BeginTx", ctx, opts)}
}

func (_c *SQLDatabase_BeginTx_Call) Run(run func(ctx context.Context, opts *sql.TxOptions)) *SQLDatabase_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.TxOptions))
	})
	return _c
}

func (_c *SQLDatabase_BeginTx_Call) Return(_a0 *sql.Tx, _a1 error) *SQLDatabase_BeginTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SQLDatabase_BeginTx_Call) RunAndReturn(run func(context.Context, *sql.TxOptions) (*sql.Tx, error)) *SQLDatabase_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// ExecContext provides a mock function with given fields: ctx, query, args
func (_m *SQLDatabase) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (sql.Result, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) sql.Result); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SQLDatabase_ExecContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecContext'
type SQLDatabase_ExecContext_Call struct {
	*mock.Call
}

// ExecContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *SQLDatabase_Expecter) ExecContext(ctx interface{}, query interface{}, args ...interface{}) *SQLDatabase_ExecContext_Call {
	return &SQLDatabase_ExecContext_Call{Call: _e.mock.On("ExecContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *SQLDatabase_ExecContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *SQLDatabase_ExecContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *SQLDatabase_ExecContext_Call) Return(_a0 sql.Result, _a1 error) *SQLDatabase_ExecContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SQLDatabase_ExecContext_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (sql.Result, error)) *SQLDatabase_ExecContext_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareContext provides a mock function with given fields: ctx, query
func (_m *SQLDatabase) PrepareContext(ctx context.Context, query string) (*sql.Stmt, error) {
	ret := _m.Called(ctx, query)

	var r0 *sql.Stmt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.Stmt, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.Stmt); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Stmt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SQLDatabase_PrepareContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareContext'
type SQLDatabase_PrepareContext_Call struct {
	*mock.Call
}

// PrepareContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
func (_e *SQLDatabase_Expecter) PrepareContext(ctx interface{}, query interface{}) *SQLDatabase_PrepareContext_Call {
	return &SQLDatabase_PrepareContext_Call{Call: _e.mock.On("PrepareContext", ctx, query)}
}

func (_c *SQLDatabase_PrepareContext_Call) Run(run func(ctx context.Context, query string)) *SQLDatabase_PrepareContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SQLDatabase_PrepareContext_Call) Return(_a0 *sql.Stmt, _a1 error) *SQLDatabase_PrepareContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SQLDatabase_PrepareContext_Call) RunAndReturn(run func(context.Context, string) (*sql.Stmt, error)) *SQLDatabase_PrepareContext_Call {
	_c.Call.Return(run)
	return _c
}

// QueryContext provides a mock function with given fields: ctx, query, args
func (_m *SQLDatabase) QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *sql.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (*sql.Rows, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Rows); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SQLDatabase_QueryContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryContext'
type SQLDatabase_QueryContext_Call struct {
	*mock.Call
}

// QueryContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *SQLDatabase_Expecter) QueryContext(ctx interface{}, query interface{}, args ...interface{}) *SQLDatabase_QueryContext_Call {
	return &SQLDatabase_QueryContext_Call{Call: _e.mock.On("QueryContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *SQLDatabase_QueryContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *SQLDatabase_QueryContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *SQLDatabase_QueryContext_Call) Return(_a0 *sql.Rows, _a1 error) *SQLDatabase_QueryContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SQLDatabase_QueryContext_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (*sql.Rows, error)) *SQLDatabase_QueryContext_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRowContext provides a mock function with given fields: ctx, query, args
func (_m *SQLDatabase) QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *sql.Row
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Row); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}

	return r0
}

// SQLDatabase_QueryRowContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRowContext'
type SQLDatabase_QueryRowContext_Call struct {
	*mock.Call
}

// QueryRowContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *SQLDatabase_Expecter) QueryRowContext(ctx interface{}, query interface{}, args ...interface{}) *SQLDatabase_QueryRowContext_Call {
	return &SQLDatabase_QueryRowContext_Call{Call: _e.mock.On("QueryRowContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *SQLDatabase_QueryRowContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *SQLDatabase_QueryRowContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *SQLDatabase_QueryRowContext_Call) Return(_a0 *sql.Row) *SQLDatabase_QueryRowContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SQLDatabase_QueryRowContext_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *sql.Row) *SQLDatabase_QueryRowContext_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewSQLDatabase interface {
	mock.TestingT
	Cleanup(func())
}

// NewSQLDatabase creates a new instance of SQLDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSQLDatabase(t mockConstructorTestingTNewSQLDatabase) *SQLDatabase {
	mock := &SQLDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
