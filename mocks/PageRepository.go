// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "display_parser/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// PageRepository is an autogenerated mock type for the PageRepository type
type PageRepository struct {
	mock.Mock
}

type PageRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *PageRepository) EXPECT() *PageRepository_Expecter {
	return &PageRepository_Expecter{mock: &_m.Mock}
}

// All provides a mock function with given fields: ctx
func (_m *PageRepository) All(ctx context.Context) ([]domain.PageEntity, error) {
	ret := _m.Called(ctx)

	var r0 []domain.PageEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.PageEntity, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.PageEntity); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PageEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PageRepository_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type PageRepository_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
//   - ctx context.Context
func (_e *PageRepository_Expecter) All(ctx interface{}) *PageRepository_All_Call {
	return &PageRepository_All_Call{Call: _e.mock.On("All", ctx)}
}

func (_c *PageRepository_All_Call) Run(run func(ctx context.Context)) *PageRepository_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PageRepository_All_Call) Return(_a0 []domain.PageEntity, _a1 error) *PageRepository_All_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PageRepository_All_Call) RunAndReturn(run func(context.Context) ([]domain.PageEntity, error)) *PageRepository_All_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, page
func (_m *PageRepository) Create(ctx context.Context, page domain.PageEntity) error {
	ret := _m.Called(ctx, page)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.PageEntity) error); ok {
		r0 = rf(ctx, page)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PageRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type PageRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - page domain.PageEntity
func (_e *PageRepository_Expecter) Create(ctx interface{}, page interface{}) *PageRepository_Create_Call {
	return &PageRepository_Create_Call{Call: _e.mock.On("Create", ctx, page)}
}

func (_c *PageRepository_Create_Call) Run(run func(ctx context.Context, page domain.PageEntity)) *PageRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.PageEntity))
	})
	return _c
}

func (_c *PageRepository_Create_Call) Return(_a0 error) *PageRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PageRepository_Create_Call) RunAndReturn(run func(context.Context, domain.PageEntity) error) *PageRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, pageURL
func (_m *PageRepository) Find(ctx context.Context, pageURL string) (domain.PageEntity, bool, error) {
	ret := _m.Called(ctx, pageURL)

	var r0 domain.PageEntity
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.PageEntity, bool, error)); ok {
		return rf(ctx, pageURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.PageEntity); ok {
		r0 = rf(ctx, pageURL)
	} else {
		r0 = ret.Get(0).(domain.PageEntity)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, pageURL)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, pageURL)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PageRepository_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type PageRepository_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - pageURL string
func (_e *PageRepository_Expecter) Find(ctx interface{}, pageURL interface{}) *PageRepository_Find_Call {
	return &PageRepository_Find_Call{Call: _e.mock.On("Find", ctx, pageURL)}
}

func (_c *PageRepository_Find_Call) Run(run func(ctx context.Context, pageURL string)) *PageRepository_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PageRepository_Find_Call) Return(_a0 domain.PageEntity, _a1 bool, _a2 error) *PageRepository_Find_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PageRepository_Find_Call) RunAndReturn(run func(context.Context, string) (domain.PageEntity, bool, error)) *PageRepository_Find_Call {
	_c.Call.Return(run)
	return _c
}

// PageIsExists provides a mock function with given fields: pageURL
func (_m *PageRepository) PageIsExists(pageURL string) (domain.PageEntity, bool) {
	ret := _m.Called(pageURL)

	var r0 domain.PageEntity
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (domain.PageEntity, bool)); ok {
		return rf(pageURL)
	}
	if rf, ok := ret.Get(0).(func(string) domain.PageEntity); ok {
		r0 = rf(pageURL)
	} else {
		r0 = ret.Get(0).(domain.PageEntity)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(pageURL)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// PageRepository_PageIsExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PageIsExists'
type PageRepository_PageIsExists_Call struct {
	*mock.Call
}

// PageIsExists is a helper method to define mock.On call
//   - pageURL string
func (_e *PageRepository_Expecter) PageIsExists(pageURL interface{}) *PageRepository_PageIsExists_Call {
	return &PageRepository_PageIsExists_Call{Call: _e.mock.On("PageIsExists", pageURL)}
}

func (_c *PageRepository_PageIsExists_Call) Run(run func(pageURL string)) *PageRepository_PageIsExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PageRepository_PageIsExists_Call) Return(_a0 domain.PageEntity, _a1 bool) *PageRepository_PageIsExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PageRepository_PageIsExists_Call) RunAndReturn(run func(string) (domain.PageEntity, bool)) *PageRepository_PageIsExists_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewPageRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPageRepository creates a new instance of PageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPageRepository(t mockConstructorTestingTNewPageRepository) *PageRepository {
	mock := &PageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
