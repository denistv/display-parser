default:
  image: registry.denistv777.ru/docker:24.0.5
  services:
    - name: docker:24.0.5-dind
      command: ["--insecure-registry","192.168.1.5:5000"]
variables:
  # When you use the dind service, you must instruct Docker to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket. Docker 19.03 does this automatically
  # by setting the DOCKER_HOST in
  # https://github.com/docker-library/docker/blob/d45051476babc297257df490d22cbd806f1b11e4/19.03/docker-entrypoint.sh#L23-L29
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/services/#accessing-the-services.
  #
  # Specify to Docker where to create the certificates. Docker
  # creates them automatically on boot, and creates
  # `/certs/client` to share between the service and job
  # container, thanks to volume mount from config.toml
  DOCKER_TLS_CERTDIR: "/certs"
stages:
  - test
  - build
  - deploy

build-binaries:
  image: registry.denistv777.ru/golang:1.20
  stage: build
  script:
    - make build

build-docker-images:
  image: registry.denistv777.ru/docker:24.0.5
  stage: build
  script:
    # APP
    - DOCKER_BUILDKIT=1 docker build -t registry.denistv777.ru/display-parser/app:latest --target=app-image -f Dockerfile .
    - docker push registry.denistv777.ru/display-parser/app
    # HTTP
    - DOCKER_BUILDKIT=1 docker build -t registry.denistv777.ru/display-parser/http:latest --target=http-image -f Dockerfile .
    - docker push registry.denistv777.ru/display-parser/http

lint:
  image: registry.denistv777.ru/docker:24.0.5
  stage: test
  script:
    - docker run --rm -v $(pwd):/app -v ~/.cache/golangci-lint/v1.53.3:/root/.cache -w /app registry.denistv777.ru/golangci/golangci-lint:v1.53.3 golangci-lint run -v

test:
  image: registry.denistv777.ru/golang:1.20
  stage: test
  script:
    - make test
